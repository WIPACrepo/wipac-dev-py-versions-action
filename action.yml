name: 'WIPAC Dev Py Versions'
description: 'GitHub Action Package for Generating a Build Matrix of Supported Python Versions for a Package'

inputs:
  range:
    description: 'Optional semantic versioning expression for supported Python releases (e.g., ">=3.9", ">=3.8, <3.13"), if not given then the range will be retrived from python package metadata.'
    required: false
    default: ''

outputs:
  matrix:
    description: "List of Supported Python Versions"
    value: ${{ steps.gather-py-versions.outputs.matrix }}

runs:
  using: "composite"
  steps:
    - id: gather-py-versions
      run: |
        # step: gather-py-versions
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install -r ${{ github.action_path }}/requirements.txt

        export GHA_INPUT_RANGE="${{ inputs.range }}"

        MIN_THRU_MAX_SERIES_SPACED=$(python -c "
        from wipac_dev_tools import semver_parser_tools
        import os
        
        if os.getenv('GHA_INPUT_RANGE'):
          semver_range = os.getenv('GHA_INPUT_RANGE')
        else:
          semver_range = semver_parser_tools.get_py_semver_range_for_project() 

        top_python = semver_parser_tools.get_latest_py3_release()
        all_matches = semver_parser_tools.list_all_majmin_versions(
          major=top_python[0],
          semver_range=semver_range,
          max_minor=top_python[1],
        )
        print(' '.join(f'{v[0]}.{v[1]}' for v in all_matches))
        ")
        
        echo $MIN_THRU_MAX_SERIES_SPACED

        # now, output
        echo "matrix=$( echo $MIN_THRU_MAX_SERIES_SPACED | jq -cR 'split(" ")' )" >> $GITHUB_OUTPUT

      shell: bash
